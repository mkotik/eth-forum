import { useEffect, useState, useRef } from "react";
import web3Modal, { getProviderDescription } from "web3modal";
import { FORUM_CONTRACT_ABI, FORUM_CONTRACT_ADDRESS } from "../constants";
import { providers, Contract } from "ethers";
import Head from "next/head";
import styles from "../styles/Home.module.css";

export default function Home() {
  const [messages, setMessages] = useState([]);
  const [walletConnected, setWalletConnected] = useState(false);
  const [messageText, setMessageText] = useState("");
  const [loading, setLoading] = useState(false);
  const web3ModalRef = useRef();

  const connectWallet = async () => {
    try {
      await getProviderOrSigner();
      setWalletConnected(true);
    } catch (err) {
      console.log(err);
    }
  };
  const getProviderOrSigner = async (needSigner = false) => {
    const provider = await web3ModalRef.current.connect();

    // this represents the metamask wallet
    const web3Provider = new providers.Web3Provider(provider);

    // chainId represents the network.. goerli in this case
    const { chainId } = await web3Provider.getNetwork();

    if (chainId !== 5) {
      window.alert("Change network to Goerli");
      throw new Error("Change network to Goerli");
    }

    if (needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }

    return web3Provider;
  };

  const getMessages = async () => {
    const provider = await getProviderOrSigner();
    const forumContract = new Contract(
      FORUM_CONTRACT_ADDRESS,
      FORUM_CONTRACT_ABI,
      provider
    );
    const messages = await forumContract.getMessages();
    setMessages(messages);
  };

  const submitNewMessage = async (messageText) => {
    const signer = await getProviderOrSigner(true);
    const forumContract = new Contract(
      FORUM_CONTRACT_ADDRESS,
      FORUM_CONTRACT_ABI,
      signer
    );
    // const address = await signer.getAddress();
    setLoading(true);

    await forumContract.pushMessage(messageText);
    const messages = await forumContract.getMessages();
    setMessages(messages);
    setLoading(false);
  };

  useEffect(() => {
    if (!walletConnected) {
      web3ModalRef.current = new web3Modal({
        network: "goerli",
        providerOptions: {},
        disableInjectedProvider: false,
      });
      connectWallet();
    } else {
      getMessages();
    }
  }, [walletConnected]);

  return (
    <div className={styles.container}>
      <Head>
        <title>ETH Forum</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {loading && <p>Loading...</p>}
        {messages.map((message) => {
          return (
            <div style={{ marginBottom: "10px" }}>
              <p>{message.username}:</p>
              <p>{message.text}</p>
            </div>
          );
        })}
        <div style={{ width: "400px", height: "40px", display: "flex" }}>
          <input
            style={{ width: "100%" }}
            onChange={(e) => setMessageText(e.target.value)}
          />
          <button onClick={() => submitNewMessage(messageText)}>Submit</button>
        </div>
      </main>
    </div>
  );
}
